'use client'

import Link from 'next/link'
import { useEffect } from 'react'
import { FormProvider, useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import toast from 'react-hot-toast'
import schema, { type ConfirmFormValues } from './schema'
import ConfirmCheckbox from './ConfirmCheckbox'
import ContinueButton from '@/modules/ContinueButton'
import useDeploy from '@/hooks/useDeploy'
import useConnectedWallet from '@/hooks/useConnectedWallet'
import { CHAIN_ID } from '@/constants/defaultChains'
import SwitchNetworkButton from '@/components/SwitchNetworkButton'
import MembershipConfirmation from '@/modules/create-community/components/confirm/MembershipConfirmation'
import ProfileConfirmation from '@/modules/create-community/components/confirm/ProfileConfirmation'
import { crowdfundFactoryAbi } from '@/data/contract/abis/CrowdfundFactory'
import { decodeFunctionData } from 'viem'

export function ConfirmForm(): JSX.Element {
  const { wallet } = useConnectedWallet()
  const walletChainId = parseInt(wallet?.chainId.split(':')[1] as string, 10)
  const isCorrectChain = walletChainId === CHAIN_ID
  const {
    isLoading,
    handleDeploy,
    isPendingTransaction,
    deploymentError,
    setIsLoading,
  } = useDeploy()

  const { args, functionName } = decodeFunctionData({
    abi: crowdfundFactoryAbi,
    data: '0x4e4515ba000000000000000000000000e864aa11d58492ceab10ee7ea03200d4da78363c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b5acded340d66678f01097818940a0f028dafb8d000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000005e0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001ce6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000774657374696e6700000000000000000000000000000000000000000000000000000000000000000000000000efa4054f3db3d1f5e981513a3d8a33d91fc97dc1000000000000000000000000b418f5b001af94a91dab2ce641e39722e1d9ddac00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000e63d6f414b40bafca676810ef1abf05ecc8e4590000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b5acded340d66678f01097818940a0f028dafb8d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d73a81cd18928b98a22008f1e28c81bb97202dee0000000000000000000000008723b021b008dd370fbec1c791c390a2bc95765400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000',
  })

  console.log('SWEETS functionName', functionName)
  console.log('SWEETS HELLO WORLD')
  console.log('SWEETS args', args)

  const methods = useForm<ConfirmFormValues>({
    defaultValues: {
      confirm: false,
    },
    resolver: zodResolver(schema),
  })

  const { handleSubmit } = methods

  useEffect(() => {
    if (isPendingTransaction) {
      toast.loading('Deploying DAO...')
    }
    if (deploymentError) {
      toast.dismiss()
      toast.error(deploymentError)
      setIsLoading(false)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isPendingTransaction, deploymentError])

  return (
    <FormProvider {...methods}>
      <p className="mb-6 mt-4 text-left text-grey md:mt-16">
        Make sure your community details are correct before approving. These can
        only be changed later via a community vote.
      </p>
      <form onSubmit={handleSubmit(handleDeploy)}>
        <ProfileConfirmation />
        <MembershipConfirmation />
        <div className="mt-10">
          <ConfirmCheckbox name="deployDaoAcceptance">
            I have acknowledged and agree to the{' '}
            <Link href="#" className="text-orange">
              Fam Terms of Service
            </Link>
          </ConfirmCheckbox>
        </div>
        {isCorrectChain ? (
          <ContinueButton title="Create my Community" loading={isLoading} />
        ) : (
          <SwitchNetworkButton />
        )}
      </form>
    </FormProvider>
  )
}
